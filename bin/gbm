#!/usr/bin/env bash

detect_os() {
  if [[ "$OSTYPE" = 'linux-gnu' ]]; then
    echo 'linux'
    return 0
  elif [[ "$OSTYPE" = 'darwin' ]]; then
    echo 'darwin'
    return 0
  else
    echo ''
    return 1
  fi
}

mkbin() {
  local bin_dir=$1/bin
  shift
  if [[ -e $bin_dir ]]; then
    # echo "Home binary directory($bin_dir) already exists."
    return 1
  fi

  # cat <<EOS
# Home binary directory($bin_dir) does not exist.
# So Make home binary directory($bin_dir) to home.
# EOS
  mkdir -p "$bin_dir" || return 1
}

add_execute_auth_bin() {
  bin_path=$1
  shift

  chmod u+x "$bin_path" || return 1
}

trim_bin_name() {
  local repo=$1
  shift
  echo "$repo" \
    | sed -e "s/.*\///g"
}

expand_zip() {
  local package_path=$1
  shift

  local pkg_dir
  pkg_dir=$(dirname "$package_path")
  local ext=${package_path##*.}

  if [[ $ext = 'zip' ]]; then
    unzip "$package_path" -d "$pkg_dir"
    return 0
  fi
  return 1
}

rename_bin() {
  local package_path=$1
  shift
  local bin_name=$1
  shift

  local pkg_dir
  pkg_dir=$(dirname "$package_path")
  local bin_path=$pkg_dir/$bin_name

  mv "$package_path" "$bin_path"
}

move_bin() {
  local output_bin_path=$1
  shift
  local gbm_bin_dir=$1
  shift

  local output_dir
  output_dir=$(dirname "$output_bin_path")
  local bin_name
  bin_name=$(basename "$output_bin_path")
  local gbm_bin_path=$gbm_bin_dir/$bin_name

  mv "$output_bin_path" "$gbm_bin_path" || return 1
  rm -rf "$output_dir"
}

latest_release_url() {
  local repo=$1
  shift

  local github_releases_url=https://api.github.com/repos/"${repo}"/releases/latest
  echo "$github_releases_url"
}

package_url() {
  local releases_url=$1
  shift
  local os=$1
  shift
  
  curl -sSL "$releases_url" \
    | grep "${os}[-_]amd64" \
    | grep 'browser_download_url' \
    | grep -o 'https.*[^"]'
}

fetch_package() {
  local pkg_url=$1
  shift
  local output_dir=$1
  shift

  local file_name
  file_name=$(basename "$pkg_url")
  local output_path="$output_dir"/"$file_name"

  curl -L -o "$output_path" "$pkg_url"
}

link_bin() {
  local gbm_bin_path=$1
  shift
  local bin_name
  bin_name=$(basename "$bin_path")
  local bin_path=~/bin/$bin_name

  ln -s "$gbm_bin_path" "$bin_path" || return 1
}

setup_gbm() {
  local gbm_bin_dir=$1
  shift

  mkbin ~
  mkbin "$gbm_bin_dir"
}

install() {
  local repo=$1
  shift
  local gbm_bin_dir=$1
  shift

  local os
  os=$(detect_os)

  if [[ -z $os ]]; then
    echo 'Your OS is not Linux or macOS'
    return 1
  fi

  local bin
  bin=$(trim_bin_name "$repo")
  local bin_path=$gbm_bin_dir/"$bin"

  local release_url
  release_url=$(latest_release_url "$repo")
  local pkg_url
  pkg_url=$(package_url "$release_url" "$os")
  local pkg_name
  pkg_name=$(basename "$pkg_url")

  local output_dir
  output_dir=$(mktemp -d)
  trap 'rm -rf $output_dir; exit 1' 1 2 3 15

  local output_pkg=$output_dir/$pkg_name
  local output_bin=$output_dir/$bin

  fetch_package "$pkg_url" "$output_dir" || return 1
  expand_zip "$output_pkg" \
    || rename_bin "$output_pkg" "$bin" \
    || return 1
  move_bin "$output_bin" "$gbm_bin_dir" || return 1
  add_execute_auth_bin "$bin_path" || return 1
  link_bin "$bin_path" || return 1
}

link() {
  local gbm_bin_dir=$1
  shift

  for bin in "$gbm_bin_dir"/*; do
    link_bin "$bin"
  done
}

usage() {
  cat <<"EOS"
Usage: gbm install <repository>
           link

Sub Command:
  install  Install binary.
  link     Make symbolic link to home bin dirctory.
EOS
}

gbm() {
  local GBM_BIN_DIR=~/.cache/gbm/bin

  setup_gbm $GBM_BIN_DIR

  sub_command=$1
  shift
  case $sub_command in
    install)
      local repo=$1
      install "$repo" $GBM_BIN_DIR || return 1
      ;;
    link)
      link $GBM_BIN_DIR
      ;;
    *)
      usage
      ;;
  esac
}

gbm "$@"
